/**
 Toki - SOAP Stubber for APIs generated by WSDL2ObjC
 Toki is one of the Threatened Birds in Japan
 */
import Foundation
import XCTest
import Mockingjay


public extension XCTest {
    @discardableResult
    public func stubSoap<T: WSDL2ObjCStubbable>(_ service: T, matchXML: @escaping (String) -> Bool = {_ in true}, returnXMLs: [String], status: Int = 200, headers: [String:String]? = nil, requestDecompressor: @escaping (Data) -> Data = {$0}, responseCompressor: @escaping (Data) -> Data = {$0}) -> Stub {
        let type = service.nsPrefix() + ":" + service.method
        let responseName = service.method + "Response"
        return stub(
            soap(service.endpoint, type: type, matchXML: matchXML, dataModifier: requestDecompressor),
            soap(responseName, returnXMLs: returnXMLs, ns2: service.ns2, dataModifier: responseCompressor, status: status, headers: headers))
    }
}


public protocol WSDL2ObjCStubbable {
    var endpoint: String { get }
    func nsPrefix() -> String!
    var ns2: String { get }
    var method: String { get }
}

public extension WSDL2ObjCStubbable {
    var method: String {
        let prefix = nsPrefix() + "_"
        let typeName = "\(type(of: self))";
        return (typeName as NSString).replacingOccurrences(of: prefix, with: "", options: [], range: NSRange(location: 0, length: (prefix as NSString).length))
    }
}


public func soap(_ endpoint: String, type: String, matchXML: @escaping (String) -> Bool, dataModifier: @escaping (Data) -> Data = {$0}) -> (URLRequest) -> Bool {
    return { request in
        guard let data = request.httpBody.map(dataModifier),
            let xml = String(data: data, encoding: .utf8) else { return false }
        let flattened = xml.components(separatedBy: "\n").map({$0.trimmingCharacters(in: .whitespacesAndNewlines)}).joined(separator: "")
        return uri(endpoint)(request) &&
            matchXML(flattened) &&
            (flattened.contains("<soap:Body><\(type) ") || flattened.contains("<soap:Body><\(type)>"))
    }
}

public func soap(_ responseName: String, returnXMLs: [String], ns2: String, dataModifier: @escaping (Data) -> Data = {$0}, status: Int = 200, headers: [String:String]? = nil) -> (URLRequest) -> Response {
    return { request in
        let body = "<?xml version='1.0' encoding='UTF-8'?><S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"><S:Body><ns2:\(responseName) xmlns:ns2=\"\(ns2)\">\(returnXMLs.map({"<return>\($0)</return>"}).joined(separator: ""))</ns2:\(responseName)></S:Body></S:Envelope>"
        guard let data = body.data(using: .utf8) else {
            return .failure(NSError(domain: "", code: 0, userInfo: nil))
        }
        return http(status, headers: headers, download: .content(dataModifier(data)))(request)
    }
}
